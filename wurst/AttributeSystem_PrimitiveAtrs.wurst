package AttributeSystem_PrimitiveAtrs

import AttributeSystem_Globals
import AttributeSystem_PrimitiveConfig
import initlater AttributeSystem

// Register all the primitive attrs with basic 
public function registerPrimitiveAttributes()
  registerAttribute(ATR_LIFE_MAX, "Health Total", parentsLifeMax, calculateLifeMax)
    .registerChangeHandler(handleLifeMax)
  registerAttribute(ATR_LIFE_MAX_FLAT, "Health")
  registerAttribute(ATR_LIFE_MAX_PERC, "% Health")
  registerAttribute(ATR_LIFE_REGEN, "Health Regen Total", parentsLifeRegen, calculateLifeRegen)
    .registerChangeHandler(handleLifeRegen)
  registerAttribute(ATR_LIFE_REGEN_FLAT, "Health Regen")
  registerAttribute(ATR_LIFE_REGEN_PERC, "% Health Rege")
  registerAttribute(ATR_MANA_MAX, "Mana Total", parentsManaMax, calculateManaMax)
    .registerChangeHandler(handleManaMax)
  registerAttribute(ATR_MANA_MAX_FLAT, "Mana")
  registerAttribute(ATR_MANA_MAX_PERC, "% Mana")
  registerAttribute(ATR_MANA_REGEN, "Mana Regen Total", parentsManaRegen, calculateManaRegen)
    .registerChangeHandler(handleManaRegen)
  registerAttribute(ATR_MANA_REGEN_FLAT, "Mana Regen")
  registerAttribute(ATR_MANA_REGEN_PERC, "Mana Regen")
  registerAttribute(ATR_ARMOR, "Armor Total", parentsArmor, calculateArmor)
    .registerChangeHandler(handleArmor)
  registerAttribute(ATR_ARMOR_FLAT, "Armor")
  registerAttribute(ATR_ARMOR_PERC, "% Armor")
  registerAttribute(ATR_ATK_CD, "Attack Cooldown", parentsAttackCd, calculateAttackCd)
    .registerChangeHandler(handleAttackCd)
  registerAttribute(ATR_ATK_CD_FLAT, "Attack CD")
  registerAttribute(ATR_ATK_CD_PERC, "% Attack Speed")
  registerAttribute(ATR_ATK_DMG, "Damage Total", parentsAttackDmg, calculateAttackDmg)
    .registerChangeHandler(handleAttackDmg)
  registerAttribute(ATR_ATK_DMG_FLAT, "Damage")
  registerAttribute(ATR_ATK_DMG_PERC, "% Damage")
  registerAttribute(ATR_ATK_DICE, "Attack Dice Total", parentsAttackDice, calculateAttackDice)
    .registerChangeHandler(handleAttackDice)
  registerAttribute(ATR_ATK_DICE_FLAT, "Attack Dice")
  registerAttribute(ATR_ATK_DICE_PERC, "% Attack Dice")
  registerAttribute(ATR_ATK_DICE_SIDES, "Attack Dice Sides Total", parentsAttackDiceSides, calculateAttackDiceSides)
    .registerChangeHandler(handleAttackDiceSides)
  registerAttribute(ATR_ATK_DICE_SIDES_FLAT, "Attack Dice Sides")
  registerAttribute(ATR_ATK_DICE_SIDES_PERC, "% Attack Dice Sides")
  registerAttribute(ATR_MOVESPEED, "Movespeed Total", parentsMovespeed, calculateMovespeed)
    .registerChangeHandler(handleMovespeed)
  registerAttribute(ATR_MOVESPEED_FLAT, "Movespeed")
  registerAttribute(ATR_MOVESPEED_PERC, "% Movespeed")
  registerAttribute(ATR_PRIMARY_ATR, "Primary Attribute")
  registerAttribute(ATR_AGILITY, "Agility Base Total", parentsAgility, calculateAgility)
    .registerChangeHandler(handleAgility)
  registerAttribute(ATR_AGILITY_FLAT, "Agility")
  registerAttribute(ATR_AGILITY_PERC, "% Agility")
  registerAttribute(ATR_AGILITY_TOTAL, "Agility Total", parentsAgilityTotal, calculateAgilityTotal)
  registerAttribute(ATR_STRENGTH, "Strength Base Total", parentsStrength, calculateStrength)
    .registerChangeHandler(handleStrength)
  registerAttribute(ATR_STRENGTH_FLAT, "Strength")
  registerAttribute(ATR_STRENGTH_PERC, "% Strength")
  registerAttribute(ATR_STRENGTH_TOTAL, "Strength Total", parentsStrengthTotal, calculateStrengthTotal)
  registerAttribute(ATR_INTELLIGENCE, "Intelligence Base Total", parentsIntelligence, calculateIntelligence)
    .registerChangeHandler(handleIntelligence)
  registerAttribute(ATR_INTELLIGENCE_FLAT, "Intelligence")
  registerAttribute(ATR_INTELLIGENCE_PERC, "% Intelligence")
  registerAttribute(ATR_INTELLIGENCE_TOTAL, "Intelligence Total", parentsIntelligenceTotal, calculateIntelligenceTotal)
  // Bonus Atrs
  registerAttribute(ATR_BONUS_ARMOR, "Bonus Armor")
    .registerChangeHandler(handleBonusArmor)
  registerAttribute(ATR_BONUS_ATK_DMG, "Bonus Attack Damage")
    .registerChangeHandler(handleBonusAtkDmg)
  registerAttribute(ATR_BONUS_AGILITY, "Bonus Agility")
    .registerChangeHandler(handleBonusAgility)
  registerAttribute(ATR_BONUS_STRENGTH, "Bonus Strength")
    .registerChangeHandler(handleBonusStrength)
  registerAttribute(ATR_BONUS_INTELLIGENCE, "Bonus Intelligence")
    .registerChangeHandler(handleBonusIntelligence)
  
  
